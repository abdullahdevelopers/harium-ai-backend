// --- 1. Import Dependencies ---
// Express is a minimal and flexible Node.js web application framework.
// CORS is a node.js package for providing a Connect/Express middleware 
// that can be used to enable CORS with various options.
const express = require('express');
const cors = require('cors');

// --- 2. Initialize Express App ---
const app = express();

// --- 3. Middleware Setup ---
// Enable CORS for all routes. This allows your frontend, which is served 
// from a different domain, to make requests to this backend.
app.use(cors());

// Enable the express.json() middleware to parse incoming JSON requests.
// This is how we'll get the 'question' and 'model' from the frontend.
app.use(express.json());

// --- 4. Persona-Aware AI Response Logic ---
// This function simulates a response from the Harium AI model.
// It includes specific rules to handle questions about its identity and origins.
const generateAIResponse = (question, model) => {
    const lowerCaseQuestion = question.toLowerCase();

    // --- Persona & Identity Rules ---
    if (lowerCaseQuestion.includes('who are you') || lowerCaseQuestion.includes('what are you')) {
        return `I am Harium AI, a large language model. I am currently running on the **${model}** model architecture.`;
    }

    if (lowerCaseQuestion.includes('who made you') || lowerCaseQuestion.includes('who created you') || lowerCaseQuestion.includes('developer')) {
        return `I was trained and developed by the talented team at **Chohan Space**.`;
    }

    if (lowerCaseQuestion.includes('chohan space')) {
        return `**Chohan Space** is the organization responsible for my development and training. They specialize in creating advanced AI systems.`;
    }

    // --- Content Generation Rules ---
    if (lowerCaseQuestion.includes('code') || lowerCaseQuestion.includes('javascript') || lowerCaseQuestion.includes('python')) {
        return `**Certainly!** Based on your request for a code snippet using the **${model}** model, here is an example in Python:\n\n\`\`\`python\n# Simple function to greet a user, created by Harium AI\ndef greet(name):\n  print(f"Hello, {name}! Welcome to the Harium AI platform.")\n\ngreet("Developer")\n\`\`\`\n\nThis is a basic example. You can ask for more complex code for different languages.`;
    }

    if (lowerCaseQuestion.includes('list') || lowerCaseQuestion.includes('points')) {
        return `Of course! Here is a sample list generated by the **${model}** model:\n\n* **First Point:** This is the first item in the list.\n* **Second Point:** You can use markdown for *italics* and other formatting.\n* **Third Point:** Lists are excellent for organizing information clearly.`;
    }
    
    if (lowerCaseQuestion.includes('hello') || lowerCaseQuestion.includes('hi')) {
        return `Hello there! I'm Harium AI, running on the **${model}** model. How can I assist you today?`;
    }

    // --- Default Response ---
    // This is the fallback response for any other question.
    return `Thank you for your question! The **${model}** model is processing your request. As a large language model from Chohan Space, I am here to provide you with the best possible answer for "${question}". This is a placeholder response for demonstration.`;
};


// --- 5. Define API Routes ---

// A simple GET route for the root URL ('/') to confirm the server is running.
app.get('/', (req, res) => {
    res.send('Harium AI Backend is running successfully! This service is powered by Chohan Space.');
});

// The main POST route for handling questions from the frontend application.
app.post('/ask', (req, res) => {
    // Destructure the 'question' and 'model' from the request body.
    const { question, model } = req.body;

    // Basic validation: Check if a question was provided in the request.
    if (!question) {
        return res.status(400).json({ error: 'Question is required in the request body.' });
    }
    
    // Use the AI response function to generate an answer.
    const answer = generateAIResponse(question, model || 'default');

    // Send the response back to the frontend in JSON format.
    res.json({ answer: answer });
});


// --- 6. Start the Server ---
// Use the PORT environment variable provided by the hosting service (like Render),
// or default to 5000 for local development.
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    console.log('Harium AI Backend, developed by Chohan Space, is ready to receive requests.');
});
